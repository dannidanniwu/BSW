fitgam <- gam(y ~ A + s(k, site, bs = "fs", k = 12), data = dd)
fitgam
summary(fitgam)
m2 <- brm(y ~ A +  s(k, site, bs = "fs", k = 12), data = dd, family = gaussian(), seed = 17,
iter = 20, warmup = 10,  refresh = 0)
summary(m2)
res_fitgam <- c(summary(fitgam)$p.coeff["A"], summary(fitgam)$se["A"])
res_fitgam
draw(gam)
gam.vcomp(res_fitgam, rescale = FALSE)
gam.vcomp(gam, rescale = FALSE)
gma
gam
gam <- gam(y ~ A + s(k, site, bs = "fs", k = 5), data = dd, method="REML")
gam.vcomp(gam, rescale = FALSE)
summary(gam)
res_fitgam <- c(summary(fitgam)$p.coeff["A"], summary(fitgam)$se["A"])
res_fitgam
res_fitgam <- c(summary(fitgam)$p.coeff["A"], summary(fitgam)$se["A"])
res_fitgam
summary(m2)
View(m2)
m2$model
m2$formula
m2$stanvars
m2$ranef
View(m2)
m2[["fit"]]@par_dims[["zs_1_2"]]
m2[["fit"]]@stanmodel@model_code
m2[["fit"]]@stanmodel@model_cpp[["model_cppcode"]]
m2[["fit"]]@stanmodel@model_cpp[["model_cppcode"]]
m2[["fit"]]@stanmodel@mk_cppmodule
summary(m2)
junk <- summary(m2)
View(junk)
junk$fixed
junk$fixed["A"]
junk$fixed$Estimate
junk$fixed$Estimate["A"]
junk$fixed$Estimate[2]
junk$fixed$`l-95% CI`
junk$fixed$`l-95% CI`[2]
junk$fixed$`l+95% CI`[2]
junk$fixed$`u-95% CI`[2]
summary(bayesgam) <- junk
res_bayesgam <- c(summary(m2)$fixed$Estimate[2], summary(m2)$fixed$`l-95% CI`[2],summary(m2)$fixed$`u-95% CI`[2])
res_bayesgam
summary(m2)
junk$sampler
View(junk)
junk$fixed$Rhat
junk$fixed$Rhat[2]
foo <- get_sampler_params(m2$fit)
library(rstan)
foo <- get_sampler_params(m2$fit)
View(foo)
foo[[1]]
rbindlist(foo)
rbind(foo)
sparams <- get_sampler_params(m2, inc_warmup=FALSE)
sum(sapply(sparams, function(x) sum(x[, 'divergent__'])))
sparams <- get_sampler_params(m2, inc_warmup=FALSE)
m2
sparams <- get_sampler_params(m2, inc_warmup=FALSE)
sparams <- get_sampler_params(m2$fit, inc_warmup=FALSE)
sum(sapply(sparams, function(x) sum(x[, 'divergent__'])))
quantile(extract(m2$fit, pars = 'A'), probs = c(0.025, 0.25, 0.5, 0.75, 0.975)) #control treatment effect
m2$fit
quantile(extract(m2$fit, pars = 'b_A'), probs = c(0.025, 0.25, 0.5, 0.75, 0.975)) #control treatment effect
quantile(extract(m2$fit, pars = 'b_A')[[1]], probs = c(0.025, 0.25, 0.5, 0.75, 0.975)) #control treatment effect
mean(extract(m2$fit, pars = 'b_A')
dres[]
}
#Fit a generalized additive model with a site-specific smooth function for time
list_of_defs <- s_define()
dd <- s_generate(list_of_defs)
#fs:random factor smooth interactions
fitgam <- gam(y ~ A + s(k, site, bs = "fs", k = 12), data = dd)
#trt effect estimation and standard error
res_fitgam <- c(summary(fitgam)$p.coeff["A"], summary(fitgam)$se["A"])
#fit a Bayesian version
#https://fromthebottomoftheheap.net/2018/04/21/fitting-gams-with-brms/
m2 <- brm(y ~ A +  s(k, site, bs = "fs", k = 12), data = dd, family = gaussian(), seed = 17,
iter = 20, warmup = 10,  refresh = 0)
res_bayesgam <- c(summary(m2)$fixed$Estimate[2], summary(m2)$fixed$`l-95% CI`[2],summary(m2)$fixed$`u-95% CI`[2])
summary(m2)
summary(m2)$
msms <- marginal_smooths(m2)
plot(msms)
head(m2$fit)
m2$fit
extract(m2$fit, pars = 'b_A')
extract(m2$fit, pars = 'b_A')[[1]]
quantile(extract(m2$fit, pars = 'b_A'), probs = c(0.025, 0.25, 0.5, 0.75, 0.975)) #control treatment effect
quantile(extract(m2$fit, pars = 'b_A')[[1]], probs = c(0.025, 0.25, 0.5, 0.75, 0.975)) #control treatment effect
median(extract(m2$fit, pars = 'b_A')[[1]]) #control treatment effect
median(extract(m2$fit, pars = 'b_A')[[1]])
bayesgam
bayesgam= m2
median(bayesgam$fit, pars = 'b_A')[[1]])
median(bayesgam$fit, pars = 'b_A')
median(extract(bayesgam$fit, pars = 'b_A')[[1]])
sparams = get_sampler_params(bayesgam$fit, inc_warmup=FALSE)
div = sum(sapply(sparams, function(x) sum(x[, 'divergent__'])))
res_bayesgam <- c(summary(bayesgam)$fixed$Estimate[2], summary(bayesgam)$fixed$`l-95% CI`[2],
summary(bayesgam)$fixed$`u-95% CI`[2],median(extract(bayesgam$fit, pars = 'b_A')[[1]]),
summary(bayesgam)$fixed$Rhat[2],div)
res_bayesgam
model_results <- data.table(t(res_fitgam), t(res_bayesgam))
model_results
setnames(model_results, c("est.freq", "se.freq", "estmean.bayes", "lowci.bayes",
"upci.bayes","estmed.bayes.gam","rhat","div"))
model_results
setnames(model_results, c("est.freq", "se.freq", "est.mean.bayes", "lowci.bayes",
"upci.bayes","est.med.bayes.gam","rhat","div"))
model_results
#Data generation
#In this data generation process, the time effect will not be explicitly smooth, but the underlying covariance structure used to generate the period effects will induce some level of smoothness.
#references:https://www.rdatagen.net/post/2022-12-13-modeling-the-secular-trend-in-a-stepped-wedge-design/
#references:https://www.rdatagen.net/post/2022-11-01-modeling-secular-trend-in-crt-using-gam/
library(simstudy)
library(ggplot2)
library(data.table)
library(mgcv)
library(lme4)
library(splines)
library(brms)
library(rstan)
s_define <- function() {
#cluster-specific intercept
def <- defData(varname = "a", formula = 0, variance = 9)
#mean of cluster-time effect
def <- defData(def, varname = "mu_b", formula = 0, dist = "nonrandom")
#variance of cluster-time effect
def <- defData(def, varname = "s2_b", formula = 9, dist = "nonrandom")
#b:cluster-time effect
#A: trt for each cluster and time period
defOut <- defDataAdd(varname = "y", formula = "a + b + 5 * A", variance = 25)
return(list(def = def, defOut = defOut))
}
s_generate <- function(list_of_defs) {
list2env(list_of_defs, envir = environment())
#--- add data generation code ---#
#24 sites in total
ds <- genData(24, def, id = "site")#24 site
ds <- addPeriods(ds, 25, "site", perName = "k") #create 25 periods for each site
#cluster-time effect, a vector of site-specific time period effect,
#assume each cluster ~MVN(0,\Sigma_b)
#b:period-specific effects for each site
ds <- addCorGen(dtOld = ds, idvar = "site",
rho = 0.8, corstr = "ar1",#covariance matrix
dist = "normal", param1 = "mu_b", param2 = "s2_b", cnames = "b")
#assign the treatment status based on the stepped-wedge design
#per cluster trt change per wave
ds <- trtStepWedge(ds, "site", nWaves = 24, lenWaves = 1, startPer = 1,
grpName = "A", perName = "k")
ds$site <- as.factor(ds$site)
#30 individuals per site per period and generate each individual-level outcome
dd <- genCluster(ds, "timeID", numIndsVar = 30, level1ID = "id")
dd <- addColumns(defOut, dd)
dd[, normk := (k - min(k))/(max(k) - min(k))]#scale time period into range 0-1
dd[] #  generated_data is a data.table
}
# dp <- dd[, .(avg = mean(y)), keyby = .(A, site, k)]
#
# ggplot(data = dp, aes(x = k, y = avg)) +
#   geom_line(aes(group = site, color = factor(A))) +
#   scale_color_manual(values = c("#a53e3e", "#3ea5a5"),
#                      guide = guide_legend(reverse = TRUE),
#                      labels = c("no treatment", "treatment")) +
#   ylab("average Y") +
#   xlab("period (k)") +
#   theme(panel.grid = element_blank(),
#         legend.title = element_blank())
# ggplot(data = dd, aes(x = k, y = y)) +
#   geom_point(aes(color = factor(A, labels = c("Control", "Intervention"))),
#              size = 0.1) +
#   scale_color_manual(values = c("#d07b7c", "#7ba7d0")) +
#   facet_wrap(~site, ncol = 8) +
#   theme(panel.grid = element_blank(),
#         legend.title = element_blank(),
#         axis.text.y = element_text(size = 7),
#         strip.text = element_text(size = 8),
#         axis.text.x = element_blank(),
#         axis.ticks.x = element_blank()) +
#   xlim(c(0, 24)) +
#   guides(color = guide_legend(override.aes = list(size = 2)))
s_model <- function(dd) {
fitgam <- gam(y ~ A + s(k, site, bs = "fs", k = 5), data = dd, method="REML")
res_fitgam <- c(summary(fitgam)$p.coeff["A"], summary(fitgam)$se["A"])
#fit a Bayesian version
#https://fromthebottomoftheheap.net/2018/04/21/fitting-gams-with-brms/
#res_bayesgam$model: can be used to check the stan code
#every parameter is summarized using the mean (Estimate) and the standard deviation
#(Est.Error) of the posterior distribution as well as two-sided 95% credible intervals
#(l-95% CI and u-95% CI) based on quantiles
bayesgam = brm(y ~ A +  s(k, site, bs = "fs", k = 5), data = dd, family = gaussian(), cores = 4,
iter = 5, warmup = 2,  refresh = 0,
control = list(adapt_delta = 0.9))
sparams = get_sampler_params(bayesgam$fit, inc_warmup=FALSE)
div = sum(sapply(sparams, function(x) sum(x[, 'divergent__'])))
res_bayesgam <- c(summary(bayesgam)$fixed$Estimate[2], summary(bayesgam)$fixed$`l-95% CI`[2],
summary(bayesgam)$fixed$`u-95% CI`[2],median(extract(bayesgam$fit, pars = 'b_A')[[1]]),
summary(bayesgam)$fixed$Rhat[2],div)
model_results <- data.table(t(res_fitgam), t(res_bayesgam))
setnames(model_results, c("est.freq", "se.freq", "est.mean.bayes", "lowci.bayes",
"upci.bayes","est.med.bayes.gam","rhat","div"))
return(model_results) # model_results is a data.table
}
s_single_rep <- function(list_of_defs) {
generated_data <- s_generate(list_of_defs)
model_results <- s_model(generated_data)
return(model_results)
}
s_replicate <- function(nsim) {
list_of_defs <- s_define()
model_results <- rbindlist(
pbapply::pblapply(
X = 1 : nsim,
FUN = function(x) s_single_rep(list_of_defs),
cl = 4)
)
#--- add summary statistics code ---#
return(model_results) # summary_stats is a data.table
}
dres <- s_replicate(2)
s_define <- function() {
#cluster-specific intercept
def <- defData(varname = "a", formula = 0, variance = 9)
#mean of cluster-time effect
def <- defData(def, varname = "mu_b", formula = 0, dist = "nonrandom")
#variance of cluster-time effect
def <- defData(def, varname = "s2_b", formula = 9, dist = "nonrandom")
#b:cluster-time effect
#A: trt for each cluster and time period
defOut <- defDataAdd(varname = "y", formula = "a + b + 5 * A", variance = 25)
return(list(def = def, defOut = defOut))
}
s_generate <- function(list_of_defs) {
list2env(list_of_defs, envir = environment())
#--- add data generation code ---#
#24 sites in total
ds <- genData(24, def, id = "site")#24 site
ds <- addPeriods(ds, 25, "site", perName = "k") #create 25 periods for each site
#cluster-time effect, a vector of site-specific time period effect,
#assume each cluster ~MVN(0,\Sigma_b)
#b:period-specific effects for each site
ds <- addCorGen(dtOld = ds, idvar = "site",
rho = 0.8, corstr = "ar1",#covariance matrix
dist = "normal", param1 = "mu_b", param2 = "s2_b", cnames = "b")
#assign the treatment status based on the stepped-wedge design
#per cluster trt change per wave
ds <- trtStepWedge(ds, "site", nWaves = 24, lenWaves = 1, startPer = 1,
grpName = "A", perName = "k")
ds$site <- as.factor(ds$site)
#30 individuals per site per period and generate each individual-level outcome
dd <- genCluster(ds, "timeID", numIndsVar = 30, level1ID = "id")
dd <- addColumns(defOut, dd)
dd[, normk := (k - min(k))/(max(k) - min(k))]#scale time period into range 0-1
dd[] #  generated_data is a data.table
}
# dp <- dd[, .(avg = mean(y)), keyby = .(A, site, k)]
#
# ggplot(data = dp, aes(x = k, y = avg)) +
#   geom_line(aes(group = site, color = factor(A))) +
#   scale_color_manual(values = c("#a53e3e", "#3ea5a5"),
#                      guide = guide_legend(reverse = TRUE),
#                      labels = c("no treatment", "treatment")) +
#   ylab("average Y") +
#   xlab("period (k)") +
#   theme(panel.grid = element_blank(),
#         legend.title = element_blank())
# ggplot(data = dd, aes(x = k, y = y)) +
#   geom_point(aes(color = factor(A, labels = c("Control", "Intervention"))),
#              size = 0.1) +
#   scale_color_manual(values = c("#d07b7c", "#7ba7d0")) +
#   facet_wrap(~site, ncol = 8) +
#   theme(panel.grid = element_blank(),
#         legend.title = element_blank(),
#         axis.text.y = element_text(size = 7),
#         strip.text = element_text(size = 8),
#         axis.text.x = element_blank(),
#         axis.ticks.x = element_blank()) +
#   xlim(c(0, 24)) +
#   guides(color = guide_legend(override.aes = list(size = 2)))
s_model <- function(dd) {
fitgam <- gam(y ~ A + s(k, site, bs = "fs", k = 5), data = dd, method="REML")
res_fitgam <- c(summary(fitgam)$p.coeff["A"], summary(fitgam)$se["A"])
#fit a Bayesian version
#https://fromthebottomoftheheap.net/2018/04/21/fitting-gams-with-brms/
#res_bayesgam$model: can be used to check the stan code
#every parameter is summarized using the mean (Estimate) and the standard deviation
#(Est.Error) of the posterior distribution as well as two-sided 95% credible intervals
#(l-95% CI and u-95% CI) based on quantiles
bayesgam = brm(y ~ A +  s(k, site, bs = "fs", k = 5), data = dd, family = gaussian(), cores = 4,
iter = 5, warmup = 2,  refresh = 0,
control = list(adapt_delta = 0.9))
sparams = get_sampler_params(bayesgam$fit, inc_warmup=FALSE)
div = sum(sapply(sparams, function(x) sum(x[, 'divergent__'])))
res_bayesgam <- c(summary(bayesgam)$fixed$Estimate[2], summary(bayesgam)$fixed$`l-95% CI`[2],
summary(bayesgam)$fixed$`u-95% CI`[2],median(extract(bayesgam$fit, pars = 'b_A')[[1]]),
summary(bayesgam)$fixed$Rhat[2],div)
model_results <- data.table(t(res_fitgam), t(res_bayesgam))
setnames(model_results, c("est.freq", "se.freq", "est.mean.bayes", "lowci.bayes",
"upci.bayes","est.med.bayes.gam","rhat","div"))
return(model_results) # model_results is a data.table
}
s_single_rep <- function(list_of_defs) {
generated_data <- s_generate(list_of_defs)
model_results <- s_model(generated_data)
return(model_results)
}
s_replicate <- function(nsim) {
list_of_defs <- s_define()
model_results <- rbindlist(
lapply(
X = 1 : nsim,
FUN = function(x) s_single_rep(list_of_defs))
)
#--- add summary statistics code ---#
return(model_results) # summary_stats is a data.table
}
dres <- s_replicate(2)
dres
s_model <- function(dd) {
fitgam <- gam(y ~ A + s(k, site, bs = "fs", k = 5), data = dd, method="REML")
res_fitgam <- c(summary(fitgam)$p.coeff["A"], summary(fitgam)$se["A"])
#fit a Bayesian version
#https://fromthebottomoftheheap.net/2018/04/21/fitting-gams-with-brms/
#res_bayesgam$model: can be used to check the stan code
#every parameter is summarized using the mean (Estimate) and the standard deviation
#(Est.Error) of the posterior distribution as well as two-sided 95% credible intervals
#(l-95% CI and u-95% CI) based on quantiles
bayesgam = brm(y ~ A +  s(k, site, bs = "fs", k = 5), data = dd, family = gaussian(), #cores = 4,
iter = 5, warmup = 2,  refresh = 0)#,
#control = list(adapt_delta = 0.9))
sparams = get_sampler_params(bayesgam$fit, inc_warmup=FALSE)
div = sum(sapply(sparams, function(x) sum(x[, 'divergent__'])))
res_bayesgam <- c(summary(bayesgam)$fixed$Estimate[2], summary(bayesgam)$fixed$`l-95% CI`[2],
summary(bayesgam)$fixed$`u-95% CI`[2],median(extract(bayesgam$fit, pars = 'b_A')[[1]]),
summary(bayesgam)$fixed$Rhat[2],div)
model_results <- data.table(t(res_fitgam), t(res_bayesgam))
setnames(model_results, c("est.freq", "se.freq", "est.mean.bayes", "lowci.bayes",
"upci.bayes","est.med.bayes.gam","rhat","div"))
return(model_results) # model_results is a data.table
}
s_single_rep <- function(list_of_defs) {
generated_data <- s_generate(list_of_defs)
model_results <- s_model(generated_data)
return(model_results)
}
s_replicate <- function(nsim) {
list_of_defs <- s_define()
model_results <- rbindlist(
lapply(
X = 1 : nsim,
FUN = function(x) s_single_rep(list_of_defs))
)
#--- add summary statistics code ---#
return(model_results) # summary_stats is a data.table
}
dres <- s_replicate(2)
dres
summary(bayesgam)$fixed$Rhat[2]
bayesgam$stancode
brms::stancode()
brms::stancode
m2$stan_funs
m2$model
brms::stancode
list_of_defs <- s_define()
list_of_defs
model_results
iter=1
data.table(iter=iter, model_results)
m2$stanvars
m2$data.name
View(m2)
load("/Users/danni/Downloads/GAM_bayes_freq.rda")
results_agg
brms
brms()
m2$model
# Create the basis functions using mgcv
fit <- gam(y ~ A + s(k, site, bs = "fs", k = 5), data = dd, select = TRUE, method="REML")
# Extract the design matrix for the spline
Z <- predict(fit, type="lpmatrix")
Z
# The remaining design matrix for the linear predictor A
X <- model.matrix(~ A, data = dd)
X
head(X)
head(Z)
mod <- gam(y ~ s(k, site, bs = "fs", k = 5), data=dd)
MM <- model.matrix(mod)
# The columns of MM corresponding to the smooth term are the basis functions.
# Depending on other terms in the model, you might have to adjust which columns you extract.
# In this simple case, it's just all the columns:
B <- MM
head(B)
SUMARY(b)
summary(B)
head(dd)
library(splines)
# Compute B-spline basis matrix
df <- 5
# Decide on the number of basis functions
B <- bs(dd$timeID, df = df, intercept = TRUE)
head(B)
summary(B)
View(B)
B <- bs(dd$timeID, df = 5, intercept = TRUE)
matplot(dd$timeID, B, type = 'l', lty = 1,
xlab = "Time", ylab = "B-spline Basis",
main = "B-spline Basis Functions")
mod <- cmdstan_model("./time_spline.stan");
library(cmdstanr)
mod <- cmdstan_model("./time_spline.stan");
setwd("~/Library/CloudStorage/OneDrive-NYULangoneHealth/Bayesian stepped wedge/Bayesian-stepped-wedge/Stan")
mod <- cmdstan_model("./time_spline.stan");
head(dd)
J = length(unique(dd$site))
J
ncol(B)
B <- bs(dd$timeID, df = 5, intercept = TRUE)
# matplot(dd$timeID, B, type = 'l', lty = 1,
#         xlab = "Time", ylab = "B-spline Basis",
#         main = "B-spline Basis Functions")
J = length(unique(dd$site))
K_bspline = ncol(B)
studydata <- list(
N = nrow(dd), J=J, K_bspline=K_bspline,
B=B, Y=dd$y,cluster=dd$site, A=dd$A)
fit <- mod$sample(
data = studydata,
refresh = 0,
chains = 4L,
parallel_chains = 4L,
iter_warmup = 5,
iter_sampling = 10,
show_messages = FALSE)
summary(fit)
diagnostics_df <- as_draws_df(fit$sampler_diagnostics())
div <- sum(diagnostics_df[, 'divergent__'])
tree_hit <- sum(diagnostics_df$treedepth__ == 10)
diagnostics_df <- as_draws_df(fit$sampler_diagnostics())
div <- sum(diagnostics_df[, 'divergent__'])
div
tree_hit <- sum(diagnostics_df$treedepth__ == 10)
tree_hit
fit$summary
fit$summary()
fit$summary()
fit$summary("delta")
delta_pos = fit$summary("delta")
delta_pos[,.(mean,median)]
delta_pos[,("mean","median")]
delta_pos[,c("mean","median")]
fit$summary(variables="delta",
posterior::default_summary_measures()[1:4],
quantiles = ~ quantile2(., probs = c(0.025, 0.975)),
posterior::default_convergence_measures())
delta_pos = fit$summary(variables="delta",
posterior::default_summary_measures()[1:4],
quantiles = ~ quantile(., probs = c(0.025, 0.975)),
posterior::default_convergence_measures())
delta_pos
fit$summary(variables="delta",
posterior::default_summary_measures()[1:4],
quantiles = ~ quantile(., probs = c(0.025,0.5, 0.975)),
posterior::default_convergence_measures())
delta_pos = fit$summary(variables="delta",
posterior::default_summary_measures()[1:4],
quantiles = ~ quantile(., probs = c(0.025, 0.975)),
posterior::default_convergence_measures())
delta_pos
res_bayesgam <- delta_pos[,c("mean","median","`2.5%`")]
delta_pos[,c("mean","median",`2.5%`)]
delta_pos[,c("mean","median","`2.5%`")]
fit$summary(variables="delta",
posterior::default_summary_measures()[1:2],
quantiles = ~ quantile(., probs = c(0.025, 0.975)),
posterior::default_convergence_measures())
fit$summary(variables="delta",
posterior::default_summary_measures()[1:2],
quantiles = ~ quantile(., probs = c(0.025, 0.975)),
rhat)
res_bayesgam = fit$summary(variables="delta",
posterior::default_summary_measures()[1:2],
quantiles = ~ quantile(., probs = c(0.025, 0.975)),
posterior::default_convergence_measures())
data.table(t(res_fitgam), t(res_bayesgam))
data.table(t(res_fitgam), res_bayesgam)
model_results <- data.table(t(res_fitgam), res_bayesgam,div)
model_results
diagnostics_df <- as_draws_df(fit$sampler_diagnostics())
div <- sum(diagnostics_df[, 'divergent__'])
tree_hit <- sum(diagnostics_df$treedepth__ == 10)
res_bayesgam = fit$summary(variables="delta",
posterior::default_summary_measures()[1:2],
quantiles = ~ quantile(., probs = c(0.025, 0.975)),
posterior::default_convergence_measures())
model_results <- data.table(t(res_fitgam), res_bayesgam,div)
setnames(model_results, c("est.freq", "se.freq", "variable","est.mean.bayes",
"est.med.bayes",
"lowci.bayes",
"upci.bayes","rhat","ess_bulk","ess_tail",
"div"))
model_results
data.table(t(res_fitgam), res_bayesgam,div)
summary(dd)
View(dd)
